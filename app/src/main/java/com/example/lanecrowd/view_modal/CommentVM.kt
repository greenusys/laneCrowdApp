package com.example.lanecrowd.view_modalimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport com.example.lanecrowd.retrofit.ApiClientimport com.example.lanecrowd.retrofit.ApiInterfaceimport com.google.gson.JsonObjectimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseclass CommentVM : ViewModel() {    var fetchCommentRes: MutableLiveData<JsonObject>? = null    lateinit var apiInterface: ApiInterface    fun fetchCommentVM(post_id: String, offset: String): MutableLiveData<JsonObject> {        apiInterface = ApiClient.getClient().create(ApiInterface::class.java)        fetchCommentRes = MutableLiveData()        fechCommentAPI(post_id, offset)        return fetchCommentRes as MutableLiveData<JsonObject>    }    fun addCommentVM(post_id: String,comment: String, comment_by: String): MutableLiveData<JsonObject> {        apiInterface = ApiClient.getClient().create(ApiInterface::class.java)        fetchCommentRes = MutableLiveData()         addCommentAPI(post_id,comment_by,comment)        return fetchCommentRes as MutableLiveData<JsonObject>    }    fun deleteCommentVM(comment_id: String): MutableLiveData<JsonObject> {        apiInterface = ApiClient.getClient().create(ApiInterface::class.java)        fetchCommentRes = MutableLiveData()        deleteCommentAPI(comment_id)        return fetchCommentRes as MutableLiveData<JsonObject>    }    fun editCommentVM(userID:String,comment:String,comment_id: String): MutableLiveData<JsonObject> {        apiInterface = ApiClient.getClient().create(ApiInterface::class.java)        fetchCommentRes = MutableLiveData()        editCommentAPI(userID,comment,comment_id)        return fetchCommentRes as MutableLiveData<JsonObject>    }    fun fechCommentAPI(post_id: String, offset: String) {        println("fechComment" + post_id  + " " + offset)        val call = apiInterface.getComments(post_id, offset)        call.enqueue(object : Callback<JsonObject> {            override fun onResponse(call: Call<JsonObject>, response: Response<JsonObject>) {                try {                    println("fechComment" + response.body())                    if (response.isSuccessful) {                        fetchCommentRes!!.value = response.body()                    } else                        fetchCommentRes?.value = null                } catch (e: Exception) {                    e.printStackTrace()                }            }            override fun onFailure(call: Call<JsonObject>, t: Throwable) {                println("Failed" + t.message)                fetchCommentRes?.value = null                call.cancel()            }        })    }    fun addCommentAPI(post_id: String, commented_by_: String, comment: String) {        println("addCommentAPI" + post_id + "  " + commented_by_ + " " + comment)        val call = apiInterface.addComment("", post_id, comment, commented_by_)        call.enqueue(object : Callback<JsonObject> {            override fun onResponse(call: Call<JsonObject>, response: Response<JsonObject>) {                try {                    println("addCommentAPI" + response.body())                } catch (e: Exception) {                    e.printStackTrace()                }            }            override fun onFailure(call: Call<JsonObject>, t: Throwable) {                println("Failed" + t.message)                call.cancel()            }        })    }    fun deleteCommentAPI(c_id: String) {        println("deleteCommentAPI" + c_id )        val call = apiInterface.deleteComments(c_id)        call.enqueue(object : Callback<JsonObject> {            override fun onResponse(call: Call<JsonObject>, response: Response<JsonObject>) {                try {                    println("deleteCommentAPI" + response.body())                } catch (e: Exception) {                    e.printStackTrace()                }            }            override fun onFailure(call: Call<JsonObject>, t: Throwable) {                println("Failed" + t.message)                call.cancel()            }        })    }    fun editCommentAPI(userId:String,comment:String,c_id: String) {        println("editCommentAPI" + c_id )        val call = apiInterface.editComments(userId,comment,c_id,"")        call.enqueue(object : Callback<JsonObject> {            override fun onResponse(call: Call<JsonObject>, response: Response<JsonObject>) {                try {                    println("editCommentAPI" + response.body())                } catch (e: Exception) {                    e.printStackTrace()                }            }            override fun onFailure(call: Call<JsonObject>, t: Throwable) {                println("Failed" + t.message)                call.cancel()            }        })    }}