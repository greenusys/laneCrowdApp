package com.example.lanecrowd.view_modalimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport com.example.lanecrowd.retrofit.ApiClientimport com.example.lanecrowd.retrofit.ApiInterfaceimport com.google.gson.JsonObjectimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseclass FetchPostVm : ViewModel() {    var fetchPostRes: MutableLiveData<JsonObject>? = null    lateinit var apiInterface: ApiInterface    fun fetchPostvm(userId:String,offset:String): MutableLiveData<JsonObject> {        apiInterface = ApiClient.getClient().create(ApiInterface::class.java)        fetchPostRes = MutableLiveData()        fetchPost(userId,offset)        return fetchPostRes as MutableLiveData<JsonObject>    }        fun deletePosetAPI(postId:String): MutableLiveData<JsonObject> {            apiInterface = ApiClient.getClient().create(ApiInterface::class.java)        deletePost(postId)        return fetchPostRes as MutableLiveData<JsonObject>    }    fun likeDislikeAPI(postId:String,userId:String): MutableLiveData<JsonObject> {            apiInterface = ApiClient.getClient().create(ApiInterface::class.java)        likeDislike(postId,userId)        return fetchPostRes as MutableLiveData<JsonObject>    }    fun fetchPost(userId:String,offset:String) {        println("fetch_post_called"+offset)        val call = apiInterface.fetchpost("",userId,offset)        call.enqueue(object : Callback<JsonObject> {            override fun onResponse(call: Call<JsonObject>, response: Response<JsonObject>) {                try {                    println("fetch_post_res"+response.body())                    if (response.isSuccessful) {                        fetchPostRes!!.value = response.body()                    }                    else                        fetchPostRes?.value = null                } catch (e: Exception) {                    e.printStackTrace()                }            }            override fun onFailure(call: Call<JsonObject>, t: Throwable) {                println("Failed" + t.message)                fetchPostRes?.value = null                call.cancel()            }        })    }    fun deletePost(poset_id:String) {        println("deletePost"+poset_id)        val call = apiInterface.deletePost(poset_id)        call.enqueue(object : Callback<JsonObject> {            override fun onResponse(call: Call<JsonObject>, response: Response<JsonObject>) {                try {                    println("delete_post_res"+response.body())                } catch (e: Exception) {                    e.printStackTrace()                }            }            override fun onFailure(call: Call<JsonObject>, t: Throwable) {                println("Failed" + t.message)                call.cancel()            }        })    }    fun likeDislike(post_id:String,userId:String) {        println("likeDislike"+post_id+" "+userId)        val call = apiInterface.likeDislikePost("",post_id,userId)        call.enqueue(object : Callback<JsonObject> {            override fun onResponse(call: Call<JsonObject>, response: Response<JsonObject>) {                try {                    println("likeDislike"+response.body())                } catch (e: Exception) {                    e.printStackTrace()                }            }            override fun onFailure(call: Call<JsonObject>, t: Throwable) {                println("Failed" + t.message)                call.cancel()            }        })    }}