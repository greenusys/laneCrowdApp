package com.example.lanecrowd.view_modalimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport com.example.lanecrowd.modal.repository.UserRepositoryimport com.google.gson.JsonObjectimport io.reactivex.android.schedulers.AndroidSchedulersimport io.reactivex.disposables.CompositeDisposableimport io.reactivex.observers.DisposableSingleObserverimport io.reactivex.schedulers.Schedulersclass FetchPostVm(val repo: UserRepository) : ViewModel() {    var fetchPostRes: MutableLiveData<JsonObject>? = null    var fetchStoryRes: MutableLiveData<JsonObject>? = null    private val compositeDisposable = CompositeDisposable()    fun fetchPostvm(userId: String, offset: String): MutableLiveData<JsonObject> {        fetchPostRes = MutableLiveData()        fetchPost(userId, offset)        return fetchPostRes as MutableLiveData<JsonObject>    }    fun deletePosetAPI(postId: String): MutableLiveData<JsonObject> {        deletePost(postId)        return fetchPostRes as MutableLiveData<JsonObject>    }    fun likeDislikeAPI(postId: String, userId: String) {        likeDislike(postId, userId)    }    fun fetchStoryVM(user_id: String, offset: String): MutableLiveData<JsonObject> {        fetchStoryRes = MutableLiveData()        fetchStoryAPI(user_id, offset)        return fetchStoryRes as MutableLiveData<JsonObject>    }    fun fetchStoryAPI(userId: String, offset: String) {        println("fetchStoryAPI" + offset + " " + userId)        compositeDisposable.add(            repo.fetchStoryRepo("", userId, offset)                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribeWith(object : DisposableSingleObserver<JsonObject?>() {                    override fun onSuccess(response: JsonObject) {                        println("fetch_Story_res" + response)                        if (response.has("code") &&response.get("code").toString().equals("1")) {                            println("if_kaif")                            fetchStoryRes!!.value = response                        } else {                            println("ifelse_kaif")                            fetchStoryRes!!.value = null                        }                    }                    override fun onError(e: Throwable) {                        println("Errorrrr" + e.message)                        fetchStoryRes?.value = null                    }                })        )    }    fun fetchPost(userId: String, offset: String) {        println("fetch_post_called" + offset + " " + userId)        compositeDisposable.add(            repo.fetchPostRepo("", userId, offset)                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribeWith(object : DisposableSingleObserver<JsonObject?>() {                    override fun onSuccess(response: JsonObject) {                        println("fetch_post_res" + response)                        if (response.has("code") && response.get("code").toString().equals("1")) {                            fetchPostRes!!.value = response                        } else {                            fetchPostRes!!.value = response                        }                    }                    override fun onError(e: Throwable) {                        println("Errorrrr" + e.message)                        fetchPostRes?.value = null                    }                })        )    }    fun deletePost(poset_id: String) {        println("deletePost" + poset_id)        compositeDisposable.add(            repo.deletePostRepo(poset_id)                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribeWith(object : DisposableSingleObserver<JsonObject?>() {                    override fun onSuccess(response: JsonObject) {                        println("delete_post_res" + response)                    }                    override fun onError(e: Throwable) {                        println("Errorrrr" + e.message)                    }                })        )    }    fun likeDislike(post_id: String, userId: String) {        println("likeDislike" + post_id + " " + userId)        compositeDisposable.add(            repo.likeDislikePostRepo(post_id, userId)                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribeWith(object : DisposableSingleObserver<JsonObject?>() {                    override fun onSuccess(response: JsonObject) {                        println("likeDislike" + response)                    }                    override fun onError(e: Throwable) {                        println("Errorrrr" + e.message)                    }                })        )    }    override fun onCleared() {        super.onCleared()        println("cleared")        compositeDisposable.clear()    }}